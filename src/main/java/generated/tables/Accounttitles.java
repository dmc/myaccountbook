/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.AccountbookTest;
import generated.Keys;
import generated.tables.records.AccounttitlesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounttitles extends TableImpl<AccounttitlesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accountbook_test.accounttitles</code>
     */
    public static final Accounttitles ACCOUNTTITLES = new Accounttitles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccounttitlesRecord> getRecordType() {
        return AccounttitlesRecord.class;
    }

    /**
     * The column <code>accountbook_test.accounttitles.accounttitle_id</code>.
     */
    public final TableField<AccounttitlesRecord, String> ACCOUNTTITLE_ID = createField(DSL.name("accounttitle_id"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>accountbook_test.accounttitles.accounttitle_name</code>.
     */
    public final TableField<AccounttitlesRecord, String> ACCOUNTTITLE_NAME = createField(DSL.name("accounttitle_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>accountbook_test.accounttitles.accounting_type</code>.
     */
    public final TableField<AccounttitlesRecord, String> ACCOUNTING_TYPE = createField(DSL.name("accounting_type"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>accountbook_test.accounttitles.loan_type</code>.
     */
    public final TableField<AccounttitlesRecord, String> LOAN_TYPE = createField(DSL.name("loan_type"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>accountbook_test.accounttitles.summary_type</code>.
     */
    public final TableField<AccounttitlesRecord, String> SUMMARY_TYPE = createField(DSL.name("summary_type"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    private Accounttitles(Name alias, Table<AccounttitlesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounttitles(Name alias, Table<AccounttitlesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>accountbook_test.accounttitles</code> table
     * reference
     */
    public Accounttitles(String alias) {
        this(DSL.name(alias), ACCOUNTTITLES);
    }

    /**
     * Create an aliased <code>accountbook_test.accounttitles</code> table
     * reference
     */
    public Accounttitles(Name alias) {
        this(alias, ACCOUNTTITLES);
    }

    /**
     * Create a <code>accountbook_test.accounttitles</code> table reference
     */
    public Accounttitles() {
        this(DSL.name("accounttitles"), null);
    }

    public <O extends Record> Accounttitles(Table<O> child, ForeignKey<O, AccounttitlesRecord> key) {
        super(child, key, ACCOUNTTITLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AccountbookTest.ACCOUNTBOOK_TEST;
    }

    @Override
    public UniqueKey<AccounttitlesRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTTITLES_PRIMARY;
    }

    @Override
    public Accounttitles as(String alias) {
        return new Accounttitles(DSL.name(alias), this);
    }

    @Override
    public Accounttitles as(Name alias) {
        return new Accounttitles(alias, this);
    }

    @Override
    public Accounttitles as(Table<?> alias) {
        return new Accounttitles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounttitles rename(String name) {
        return new Accounttitles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounttitles rename(Name name) {
        return new Accounttitles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounttitles rename(Table<?> name) {
        return new Accounttitles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
