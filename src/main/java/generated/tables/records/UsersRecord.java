/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Users;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>accountbook_test.users.user_id</code>.
     */
    public void setUserId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>accountbook_test.users.user_id</code>.
     */
    public String getUserId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>accountbook_test.users.hashed_password</code>.
     */
    public void setHashedPassword(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>accountbook_test.users.hashed_password</code>.
     */
    public String getHashedPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>accountbook_test.users.mail_address</code>.
     */
    public void setMailAddress(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>accountbook_test.users.mail_address</code>.
     */
    public String getMailAddress() {
        return (String) get(2);
    }

    /**
     * Setter for <code>accountbook_test.users.user_status</code>.
     */
    public void setUserStatus(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>accountbook_test.users.user_status</code>.
     */
    public String getUserStatus() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Users.USERS.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return Users.USERS.HASHED_PASSWORD;
    }

    @Override
    public Field<String> field3() {
        return Users.USERS.MAIL_ADDRESS;
    }

    @Override
    public Field<String> field4() {
        return Users.USERS.USER_STATUS;
    }

    @Override
    public String component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getHashedPassword();
    }

    @Override
    public String component3() {
        return getMailAddress();
    }

    @Override
    public String component4() {
        return getUserStatus();
    }

    @Override
    public String value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getHashedPassword();
    }

    @Override
    public String value3() {
        return getMailAddress();
    }

    @Override
    public String value4() {
        return getUserStatus();
    }

    @Override
    public UsersRecord value1(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public UsersRecord value2(String value) {
        setHashedPassword(value);
        return this;
    }

    @Override
    public UsersRecord value3(String value) {
        setMailAddress(value);
        return this;
    }

    @Override
    public UsersRecord value4(String value) {
        setUserStatus(value);
        return this;
    }

    @Override
    public UsersRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(String userId, String hashedPassword, String mailAddress, String userStatus) {
        super(Users.USERS);

        setUserId(userId);
        setHashedPassword(hashedPassword);
        setMailAddress(mailAddress);
        setUserStatus(userStatus);
    }
}
