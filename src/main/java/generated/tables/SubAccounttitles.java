/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Accountbook;
import generated.Indexes;
import generated.Keys;
import generated.tables.records.SubAccounttitlesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubAccounttitles extends TableImpl<SubAccounttitlesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accountbook.sub_accounttitles</code>
     */
    public static final SubAccounttitles SUB_ACCOUNTTITLES = new SubAccounttitles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubAccounttitlesRecord> getRecordType() {
        return SubAccounttitlesRecord.class;
    }

    /**
     * The column
     * <code>accountbook.sub_accounttitles.sub_accounttitle_id</code>.
     */
    public final TableField<SubAccounttitlesRecord, String> SUB_ACCOUNTTITLE_ID = createField(DSL.name("sub_accounttitle_id"), SQLDataType.VARCHAR(1).nullable(false), this, "");

    /**
     * The column <code>accountbook.sub_accounttitles.accounttitle_id</code>.
     */
    public final TableField<SubAccounttitlesRecord, String> ACCOUNTTITLE_ID = createField(DSL.name("accounttitle_id"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>accountbook.sub_accounttitles.user_id</code>.
     */
    public final TableField<SubAccounttitlesRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column
     * <code>accountbook.sub_accounttitles.sub_accounttitle_name</code>.
     */
    public final TableField<SubAccounttitlesRecord, String> SUB_ACCOUNTTITLE_NAME = createField(DSL.name("sub_accounttitle_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private SubAccounttitles(Name alias, Table<SubAccounttitlesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubAccounttitles(Name alias, Table<SubAccounttitlesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>accountbook.sub_accounttitles</code> table
     * reference
     */
    public SubAccounttitles(String alias) {
        this(DSL.name(alias), SUB_ACCOUNTTITLES);
    }

    /**
     * Create an aliased <code>accountbook.sub_accounttitles</code> table
     * reference
     */
    public SubAccounttitles(Name alias) {
        this(alias, SUB_ACCOUNTTITLES);
    }

    /**
     * Create a <code>accountbook.sub_accounttitles</code> table reference
     */
    public SubAccounttitles() {
        this(DSL.name("sub_accounttitles"), null);
    }

    public <O extends Record> SubAccounttitles(Table<O> child, ForeignKey<O, SubAccounttitlesRecord> key) {
        super(child, key, SUB_ACCOUNTTITLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Accountbook.ACCOUNTBOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SUB_ACCOUNTTITLES_ACCOUNTTITLE_ID, Indexes.SUB_ACCOUNTTITLES_USER_ID);
    }

    @Override
    public UniqueKey<SubAccounttitlesRecord> getPrimaryKey() {
        return Keys.KEY_SUB_ACCOUNTTITLES_PRIMARY;
    }

    @Override
    public List<ForeignKey<SubAccounttitlesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUB_ACCOUNTTITLES_IBFK_1, Keys.SUB_ACCOUNTTITLES_IBFK_2);
    }

    private transient Accounttitles _accounttitles;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>accountbook.accounttitles</code>
     * table.
     */
    public Accounttitles accounttitles() {
        if (_accounttitles == null)
            _accounttitles = new Accounttitles(this, Keys.SUB_ACCOUNTTITLES_IBFK_1);

        return _accounttitles;
    }

    /**
     * Get the implicit join path to the <code>accountbook.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SUB_ACCOUNTTITLES_IBFK_2);

        return _users;
    }

    @Override
    public SubAccounttitles as(String alias) {
        return new SubAccounttitles(DSL.name(alias), this);
    }

    @Override
    public SubAccounttitles as(Name alias) {
        return new SubAccounttitles(alias, this);
    }

    @Override
    public SubAccounttitles as(Table<?> alias) {
        return new SubAccounttitles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubAccounttitles rename(String name) {
        return new SubAccounttitles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubAccounttitles rename(Name name) {
        return new SubAccounttitles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubAccounttitles rename(Table<?> name) {
        return new SubAccounttitles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
