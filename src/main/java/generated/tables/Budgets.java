/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Accountbook;
import generated.Indexes;
import generated.Keys;
import generated.tables.records.BudgetsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Budgets extends TableImpl<BudgetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accountbook.budgets</code>
     */
    public static final Budgets BUDGETS = new Budgets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BudgetsRecord> getRecordType() {
        return BudgetsRecord.class;
    }

    /**
     * The column <code>accountbook.budgets.accounttitle_id</code>.
     */
    public final TableField<BudgetsRecord, String> ACCOUNTTITLE_ID = createField(DSL.name("accounttitle_id"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>accountbook.budgets.user_id</code>.
     */
    public final TableField<BudgetsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>accountbook.budgets.budget_amount</code>.
     */
    public final TableField<BudgetsRecord, Integer> BUDGET_AMOUNT = createField(DSL.name("budget_amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private Budgets(Name alias, Table<BudgetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Budgets(Name alias, Table<BudgetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>accountbook.budgets</code> table reference
     */
    public Budgets(String alias) {
        this(DSL.name(alias), BUDGETS);
    }

    /**
     * Create an aliased <code>accountbook.budgets</code> table reference
     */
    public Budgets(Name alias) {
        this(alias, BUDGETS);
    }

    /**
     * Create a <code>accountbook.budgets</code> table reference
     */
    public Budgets() {
        this(DSL.name("budgets"), null);
    }

    public <O extends Record> Budgets(Table<O> child, ForeignKey<O, BudgetsRecord> key) {
        super(child, key, BUDGETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Accountbook.ACCOUNTBOOK;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BUDGETS_USER_ID);
    }

    @Override
    public UniqueKey<BudgetsRecord> getPrimaryKey() {
        return Keys.KEY_BUDGETS_PRIMARY;
    }

    @Override
    public List<ForeignKey<BudgetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BUDGETS_IBFK_1, Keys.BUDGETS_IBFK_2);
    }

    private transient Accounttitles _accounttitles;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>accountbook.accounttitles</code>
     * table.
     */
    public Accounttitles accounttitles() {
        if (_accounttitles == null)
            _accounttitles = new Accounttitles(this, Keys.BUDGETS_IBFK_1);

        return _accounttitles;
    }

    /**
     * Get the implicit join path to the <code>accountbook.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.BUDGETS_IBFK_2);

        return _users;
    }

    @Override
    public Budgets as(String alias) {
        return new Budgets(DSL.name(alias), this);
    }

    @Override
    public Budgets as(Name alias) {
        return new Budgets(alias, this);
    }

    @Override
    public Budgets as(Table<?> alias) {
        return new Budgets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Budgets rename(String name) {
        return new Budgets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Budgets rename(Name name) {
        return new Budgets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Budgets rename(Table<?> name) {
        return new Budgets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
